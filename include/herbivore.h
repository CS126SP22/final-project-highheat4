#pragma once

#include "cinder/gl/gl.h"
#include "random.h"
#include "vegetation.h"

using glm::vec2;

namespace animal_simulator {

/**
 * The herbivore object which will eat from the food sources.
 */
  class Herbivore {
  public:

    /**
     * Initializes a animal
     * @param position is the initial position of the animal
     * @param velocity is the initial velocity of the animal
     * @param size is the permanent size of the animal
     * @param color is the permanent color of the animal
     */
    Herbivore(vec2 position, vec2 velocity,
              float size, ci::Color color);

    /**
     * Checks whether herbivore is touching vegetation.
     * @param food the vegetation we are checking contact with.
     * @return whether herbivore is touching vegetation.
     */
      bool IsTouchingVegetation(Vegetation food) const;

      /**
       * Creates animals one at a time.
       * @param new_size the size of the animal to be generated.
       * @param new_color the color of the animal to be generated.
       * @return the Herbivore generated by the function.
       */
      Herbivore(float new_size, cinder::Color new_color);

      /**
       * Consumes the given vegetation.
       * @param food the vegetation to be consumed.
       */
      void Consume(Vegetation & food);

    /**
     * Updates the animal position based on its velocity.
     */
    void Move();

    // Getters
    glm::vec2 GetPosition() const;
    glm::vec2 GetVelocity() const;
    float GetMass() const;
    float GetRadius() const;
    ci::Color GetColor() const;

    // Setter
    void SetVelocity(glm::vec2);

    /**
     * Calculates velocity changes given that "this" animal and animal_2 collide.
     * @param animal_2 the second animal to check a collision against.
     * @return the velocity vectors of the two animals.
     */
    std::vector<vec2> CalculateCollisionResults(Herbivore animal_2);

    /**
     * Calculates the distance between "this" animal and animal_2
     * @param animal_2 the animal to check distance against.
     * @return the distance between the two animals.
     */
    float CalculateDistance(Herbivore animal_2) const;

    /**
     * Checks whether a collision occurs against a rectangular container.
     * @param left_wall the left wall.
     * @param right_wall the right wall.
     * @param top_wall the top wall.
     * @param bottom_wall the bottom wall.
     */
    void CheckContainerCollision(float left_wall, float right_wall, float top_wall, float bottom_wall);

    /**
     * Calculates whether "this" animal is contacting animal_2.
     * @param animal_2 The second animal.
     * @return Whether "this" animal and animal_2 are in contact.
     */
    bool IsTouchingAnimal(Herbivore animal_2) const;

    /**
     * Calculates whether "this" animal is approaching animal_2.
     * @param animal_2 The second animal.
     * @return whether "this" animal is approaching animal_2.
     */
    bool ApproachesOtherAnimal(Herbivore animal_2);

  /**
   * Returns whether the current herbivore is essentially dead.
   * @return whether the current herbivore is essentially dead.
   */
  bool IsDead();

  private:
//    /**
//     * Maximum random spawn growth rate possible.
//     */
//    constexpr static const float kMaxSpawnGrowthRate = 0.1;
//
//    /**
//     * Maximum random spawn size possible.
//     */
//    constexpr static const float kMaxSpawnSize = 5;
//
//    /**
//     * Maximum random spawn health possible.
//     */
//    constexpr static const float kMaxSpawnHealth = 50;
//
//    /**
//     * Maximum random spawn eat rate possible.
//     */
//     constexpr static const float kMaxEatRate = 5;

    /**
     * Default spawn width.
     */
    static const size_t kDefaultWidth = 700;

    /**
     * Default spawn height.
     */
    static const size_t kDefaultHeight = 500;

    /**
     * Default spawn x coordinate.
     */
    static const int kDefaultXCoord = 100;

    /**
     * Default spawn y coordinate.
     */
    static const int kDefaultYCoord = 100;

    /**
     * Default spawn health.
     */
     static const int kDefaultHealth = 10;

     /**
      * Default initial energy.
      */
     static const int kDefaultEnergy = 100;

    /**
     * Individual animal position, velocity, size, radius, color, health, max health, energy and max energy.
     */
    glm::vec2 position_;
    glm::vec2 velocity_;
    float size_;
    float radius_;
    ci::Color color_;
    int health_;
    int max_health_;
    float energy_;
    float max_energy_;
//    float growth_rate_;
    float base_eat_rate_ = 0.5;


    /**
     * Calculates the new negated velocity given a wall collision.
     * @param x_or_y Whether we are negating the x value or the y value of the velocity.
     * @return The new velocity of a animal that has contacted a wall.
     */
    vec2 GetNegatedVelocity(bool x_or_y);

    /**
     * Helper function to apply collision formula.
     * @param animal_2 the animal that "this" is colliding against.
     * @return "this" animal's updated velocity given that it has collided with animal_2.
     */
    vec2 ApplyCollisionFormula(Herbivore animal_2);

      float CalculateDistance(animal_simulator::Vegetation food) const;



      float CalculateEnergyConsumption();
  };

}