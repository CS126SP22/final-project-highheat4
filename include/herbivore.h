#pragma once

#include "cinder/gl/gl.h"
#include "random.h"
#include "vegetation.h"

using glm::vec2;

namespace animal_simulator {

/**
 * The herbivore object which will eat from the food sources.
 */
  class Herbivore {
  public:
    /**
    * Initializes a herbivore
    * @param position is the initial position of the herbivore
    * @param velocity is the initial velocity of the herbivore
    * @param radius is the permanent radius of the herbivore
    * @param mass is the permanent mass of the herbivore
    * @param color is the permanent color of the herbivore
    */
    Herbivore(vec2 position, vec2 velocity, float radius,
    float mass, ci::Color color);

    /**
     * Initializes a animal
     * @param position is the initial position of the animal
     * @param velocity is the initial velocity of the animal
     * @param size is the permanent size of the animal
     * @param color is the permanent color of the animal
     */
    Herbivore(vec2 position, vec2 velocity,
              float size, ci::Color color);

    /**
    * Creates animals one at a time. Randomized stats.
    * @return the Herbivore generated by the function.
    */
    Herbivore();

    /**
     *
     * @param position position to spawn herbivore in.
     * @param new_velocity the herbivore's new velocity.
     * @param new_color the herbivore color.
     * @param new_size the size of the herbivore.
     * @param new_growth_rate the growth rate of the herbivore.
     * @param new_eat_rate the rate at which the herbivore can consume.
     * @param new_max_energy the maximum energy of the herbivore.
     * @param new_max_health the maximum health of the herbivore.
     * @param new_need_for_speed the maximum speed the herbivore will go.
     */
    Herbivore(vec2 position, vec2 new_velocity, ci::Color new_color, float new_size, float new_growth_rate,
              float new_eat_rate, float new_max_energy,
              float new_max_health, float new_need_for_speed);

    /**
    * Checks whether herbivore is touching vegetation.
    * @param food the vegetation we are checking contact with.
    * @return whether herbivore is touching vegetation.
    */
    bool IsTouchingVegetation(Vegetation food) const;

    /**
    * Consumes the given vegetation.
    * @param food the vegetation to be consumed.
    * @return whether the food is completely eaten.
    */
    bool Consume(Vegetation & food);

    /**
    * Updates the animal position based on its velocity.
    */
    void Move();

    // Getters
    glm::vec2 GetPosition() const;
    glm::vec2 GetVelocity() const;
    float GetMass() const;
    float GetRadius() const;
    ci::Color GetColor() const;

    // Setter
    void SetVelocity(glm::vec2);

    /**
    * Calculates velocity changes given that "this" animal and animal_2 collide.
    * @param animal_2 the second animal to check a collision against.
    * @return the velocity vectors of the two animals.
    */
    std::vector<vec2> CalculateCollisionResults(Herbivore animal_2);

    /**
    * Calculates the distance between "this" animal and animal_2
    * @param animal_2 the animal to check distance against.
    * @return the distance between the two animals.
    */
    float CalculateDistance(Herbivore animal_2) const;

    /**
    * Checks whether a collision occurs against a rectangular container.
    * @param left_wall the left wall.
    * @param right_wall the right wall.
    * @param top_wall the top wall.
    * @param bottom_wall the bottom wall.
    */
    void CheckContainerCollision(float left_wall, float right_wall, float top_wall, float bottom_wall);

    /**
    * Calculates whether "this" animal is contacting animal_2.
    * @param animal_2 The second animal.
    * @return Whether "this" animal and animal_2 are in contact.
    */
    bool IsTouchingAnimal(Herbivore animal_2) const;

    /**
    * Calculates whether "this" animal is approaching animal_2.
    * @param animal_2 The second animal.
    * @return whether "this" animal is approaching animal_2.
    */
    bool ApproachesOtherAnimal(Herbivore animal_2);

    /**
    * Returns whether the current herbivore is essentially dead.
    * @return whether the current herbivore is essentially dead.
    */
    bool IsDead();

    /**
     * Reproduces another herbivore with similar stats if herbivore is of age.
     */
    Herbivore Reproduce();

    /**
    * Tells whether the herbivore can reproduce.
    * @return whether the herbivore can reproduce.
    */
    bool CanReproduce();

    private:
    /**
     * Maximum random spawn growth rate possible.
     */
    constexpr static const float kMaxSpawnGrowthRate = 0.1;

    /**
     * Maximum random spawn size possible.
     */
    constexpr static const float kMaxSpawnSize = 5;

    /**
     * Maximum random spawn health possible.
     */
    constexpr static const float kMaxSpawnHealth = 50;

    /**
     * Maximum random spawn eat rate possible.
     */
     constexpr static const float kMaxEatRate = 5;

    /**
     * The maximum speed of the herbivore.
     */
    constexpr static const float kMaxNeedForSpeed = 10;

    /**
    * Default spawn width.
    */
    static const size_t kDefaultWidth = 700;

    /**
    * Default spawn height.
    */
    static const size_t kDefaultHeight = 500;

    /**
    * Default spawn x coordinate.
    */
    static const int kDefaultXCoord = 100;

    /**
    * Default spawn y coordinate.
    */
    static const int kDefaultYCoord = 100;

    /**
    * Default initial energy.
    */
    static const int kDefaultEnergy = 10;

    /**
     * Minimum age required to reproduce.
     */
     static const int kReproductionAge = 100;

    /**
    * Individual animal position, velocity, size, radius, color, health, max health, growth rate,
    * energy, need for speed, age, and max energy.
    */
    glm::vec2 position_;
    glm::vec2 velocity_;
    float size_;
    ci::Color color_;
    int health_;
    int max_health_;
    float energy_;
    float max_energy_;

    /**
     * The overall age (by frame) of the herbivore.
     */
    int age_ = 0;

    /**
     * The rate at which the herbivore grows.
     */
    float growth_rate_ = 0.01;

    /**
     * The rate at which the herbivore is able to eat.
     */
    float base_eat_rate_ = 0.5;

    /**
     * The maximum speed that the herbivore can go.
     */
    float need_for_speed_;

    /**
    * Calculates the new negated velocity given a wall collision.
    * @param x_or_y Whether we are negating the x value or the y value of the velocity.
    * @return The new velocity of a animal that has contacted a wall.
    */
    vec2 GetNegatedVelocity(bool x_or_y);

    /**
    * Helper function to apply collision formula.
    * @param animal_2 the animal that "this" is colliding against.
    * @return "this" animal's updated velocity given that it has collided with animal_2.
    */
    vec2 ApplyCollisionFormula(Herbivore animal_2);

    /**
    * Calculates the distance between this animal and vegetation.
    * @param food the food being compared against.
    * @return the distance between this animal and vegetation.
    */
    float CalculateDistance(animal_simulator::Vegetation food) const;

    /**
    * Calculates energy consumed based off of inherent characteristics such as size and velocity.
    * @return the energy consumed for this object.
    */
    float CalculateEnergyConsumption();
  };

}